from tkinter import*
import tkinter as tk
import mysql.connector as mysql
from tkinter import ttk, messagebox

#Connect to Datbase YSQL workbench
db = mysql.connect(host="localhost", user="root", password="manager", database="studentregistration" )
mycursor= db.cursor()

#define the Add Button
def Add():
    id = e1.get()
    name = e2.get()
    section = e3.get()

    sql = "INSERT INTO student (idnumber, name, section) VALUES(%s,%s,%s)"
    value = (id, name, section)
    mycursor.execute(sql , value)
    db.commit()

#define the Edit Button
def Edit():
    id = e1.get()
    name = e2.get()
    section = e3.get()

    sql = "Update student set name=%s, section=%s where idnumber=%s"
    value = (name, section, id)
    mycursor.execute(sql , value)
    db.commit()


#define the Delete Button
def Delete():
    id = e1.get()

    sql = "Delete from student where idnumber=%s"
    value = (id,)
    mycursor.execute(sql , value)
    db.commit()

#define the Showlist Button
def show():
    mycursor.execute("SELECT idnumber,name,section FROM student")
    records=mycursor.fetchall()
    print(records)


    for i, (idnumber, name, section) in enumerate(records, start=1):
        listbox.insert("", "end", values=(idnumber, name, section))







root = Tk()
root.geometry("800x800")


#Label1

Label(root,text="Student Registration ",font=('Times New Roman',30,'bold')).grid(row=0,column=3)

#Label2

idnumber=Label(root,text="ID Number")
name=Label(root,text="Name")
section=Label(root,text="Section")

idnumber.grid(row=1,column=2)
name.grid(row=2,column=2)
section.grid(row=3,column=2)

#Entry
e1=Entry(root)
e2=Entry(root)
e3=Entry(root)

e1.grid(row=1,column=3)
e2.grid(row=2,column=3)
e3.grid(row=3,column=3)

#Button

Button(root,text="Add",command=Add,height=3,width=10).place(x=100, y=450)
Button(root,text="Edit",command=Edit,height=3,width=10).place(x=200, y=450)
Button(root,text="Delete",command=Delete,height=3,width=10).place(x=300, y=450)
Button(root,text="Show List",command=show,height=3,width=10).place(x=400, y=450)

#Listbox for Students Records in the database

column1=('Idnumber' , 'Name' , 'Username')
listbox = ttk.Treeview(root,columns=column1,show='headings')

for col in column1:
    listbox.heading(col, text=col)
    listbox.grid(row=1, column=0, columnspan=2)
    listbox.place(x=9 , y=150)




root.mainloop()

##################################################################################################################################
from tkinter import *
import tkinter.messagebox as messagebox
import mysql.connector as mysql
from tkinter import ttk



# Connect to MySQL database
db = mysql.connect(host="localhost", user="root", password="manager", database="studentregistration")
mycursor = db.cursor()

# Function to handle database operations
def execute_query(query, params=None):
    try:
        if params:
            mycursor.execute(query, params)
        else:
            mycursor.execute(query)
        db.commit()
        return True
    except mysql.Error as e:
        print(f"MySQL Error: {str(e)}")
        db.rollback()
        return False

# Function to handle the Add button click
def add_student():
    id = e1.get()
    name = e2.get()
    section = e3.get()

    if id and name and section:
        query = "INSERT INTO student (idnumber, name, section) VALUES (%s, %s, %s)"
        params = (id, name, section)
        if execute_query(query, params):
            messagebox.showinfo("Success", "Student added successfully!")
            clear_entries()
            show_students()
        else:
            messagebox.showerror("Error", "Failed to add student.")
    else:
        messagebox.showwarning("Warning", "Please enter all the fields.")

# Function to handle the Edit button click
def edit_student():
    id = e1.get()
    name = e2.get()
    section = e3.get()

    if id:
        query = "UPDATE student SET name = %s, section = %s WHERE idnumber = %s"
        params = (name, section, id)
        if execute_query(query, params):
            messagebox.showinfo("Success", "Student updated successfully!")
            clear_entries()
            show_students()
        else:
            messagebox.showerror("Error", "Failed to update student.")
    else:
        messagebox.showwarning("Warning", "Please enter the ID number.")

# Function to handle the Delete button click
def delete_student():
    id = e1.get()

    if id:
        if messagebox.askyesno("Confirmation", "Are you sure you want to delete this student?"):
            query = "DELETE FROM student WHERE idnumber = %s"
            params = (id,)
            if execute_query(query, params):
                messagebox.showinfo("Success", "Student deleted successfully!")
                clear_entries()
                show_students()
            else:
                messagebox.showerror("Error", "Failed to delete student.")
    else:
        messagebox.showwarning("Warning", "Please enter the ID number.")

# Function to show the list of students
def show_students():
    query = "SELECT idnumber, name, section FROM student"
    mycursor.execute(query)
    records = mycursor.fetchall()

    # Clear existing data in the listbox
    listbox.delete(*listbox.get_children())

    # Populate the listbox with fetched records
    for record in records:
        listbox.insert("", "end", values=record)

# Function to clear the entry fields
def clear_entries():
    e1.delete(0, "end")
    e2.delete(0, "end")
    e3.delete(0, "end")

# Configuration options
window_title = "Student Registration"
window_width = 800
window_height = 500
icon_path = "C:/Users/Nikita thakur/Desktop/Studentregistration/student_registration_icon.png"
button_icons_path = {
    "add": "C:/Users/Nikita thakur/Desktop/Studentregistration/add.png",
    "edit": "C:/Users/Nikita thakur/Desktop/Studentregistration/edit.png",
    "delete": "C:/Users/Nikita thakur/Desktop/Studentregistration/delete.png",
    "show": "C:/Users/Nikita thakur/Desktop/Studentregistration/showlist.png"
}
column_headings = ('ID Number', 'Name', 'Section')

# Create the main window
root = Tk()
root.geometry(f"{window_width}x{window_height}")
root.title(window_title)

# Load button icons
root.iconphoto(True, PhotoImage(file=icon_path).subsample(1))
button_icons = {
    name: PhotoImage(file=path).subsample(2)
    for name, path in button_icons_path.items()
}

# Styling
root.configure(bg="#f1f1f1")
main_frame = Frame(root, bg="#f1f1f1")
main_frame.pack(pady=20)




# Labels
Label(main_frame, text=window_title, fg="#333", font=("Arial", 20, "bold"), bg="#f1f1f1").grid(row=0, column=1, padx=10, pady=10, sticky="w")
Label(main_frame, text="ID Number", fg="#333", font=("Arial", 12, "bold"), bg="#f1f1f1").grid(row=1, column=0, padx=10, pady=5, sticky="e")
Label(main_frame, text="Name", fg="#333", font=("Arial", 12, "bold"), bg="#f1f1f1").grid(row=2, column=0, padx=10, pady=5, sticky="e")
Label(main_frame, text="Section", fg="#333", font=("Arial", 12, "bold"), bg="#f1f1f1").grid(row=3, column=0, padx=10, pady=5, sticky="e")


# Entry fields
e1 = Entry(main_frame, font=("Arial", 12), width=30)
e2 = Entry(main_frame, font=("Arial", 12), width=30)
e3 = Entry(main_frame, font=("Arial", 12), width=30)

e1.grid(row=1, column=1, padx=10, pady=5, sticky="w")
e2.grid(row=2, column=1, padx=10, pady=5, sticky="w")
e3.grid(row=3, column=1, padx=10, pady=5, sticky="w")

# Buttons
Button(main_frame, text="Add", command=add_student, image=button_icons["add"], compound="left", font=("Arial", 12), bg="#ccc").grid(row=4, column=0, padx=10, pady=10, sticky="w")
Button(main_frame, text="Edit", command=edit_student, image=button_icons["edit"], compound="left", font=("Arial", 12), bg="#ccc").grid(row=4, column=1, padx=10, pady=10, sticky="w")
Button(main_frame, text="Delete", command=delete_student, image=button_icons["delete"], compound="left", font=("Arial", 12), bg="#ccc").grid(row=4, column=2, padx=10, pady=10, sticky="w")
Button(main_frame, text="Show List", command=show_students, image=button_icons["show"], compound="left", font=("Arial", 12), bg="#ccc").grid(row=4, column=3, padx=10, pady=10, sticky="w")


# Listbox for Students Records in the database
listbox_frame = Frame(root, bg="#f1f1f1")
listbox_frame.pack(pady=10)

listbox = ttk.Treeview(listbox_frame, columns=column_headings, show='headings')
listbox.grid(row=0, column=0, padx=10, pady=5)

# Configure column headings
for col in column_headings:
    listbox.heading(col, text=col)

# Scrollbar
scrollbar = ttk.Scrollbar(listbox_frame, orient="vertical", command=listbox.yview)
scrollbar.grid(row=0, column=1, sticky="ns")
listbox.configure(yscrollcommand=scrollbar.set)


root.mainloop()















